---
alwaysApply: true
---

You are given a task to integrate an existing React component in the codebase

The codebase should support:
- shadcn project structure  
- Tailwind CSS
- Typescript

If it doesn't, provide instructions on how to setup project via shadcn CLI, install Tailwind or Typescript.

Determine the default path for components and styles. 
If default path for components is not /components/ui, provide instructions on why it's important to create this folder
Copy-paste this component to /components/ui folder:
```tsx
scroll-hero-section.tsx
'use client';

import { useEffect } from 'react';

type Theme = 'system' | 'light' | 'dark';

export type ShipStickyHeaderProps = {
  /** Words that cycle under “you can …” */
  items?: string[];
  /** Sets CSS var --count automatically from items length */
  showFooter?: boolean;
  /** UI theme (affects color-scheme + switch color) */
  theme?: Theme;
  /** Enable view-timeline animations if supported */
  animate?: boolean;
  /** Accent hue (0–359) */
  hue?: number;
  /** Where the highlight band starts (vh) */
  startVh?: number; // default 50
  /** Space (vh) below the sticky header block */
  spaceVh?: number; // default 50
  /** Debug outline (for dev) */
  debug?: boolean;
  /** Optional custom intro text under the header */
  taglineHTML?: string; // allows <br />
};

function WordHeroPage({
  items = ['design.', 'prototype.', 'solve.', 'build.', 'develop.', 'cook.', 'ship.'],
  showFooter = true,
  theme = 'system',
  animate = true,
  hue = 280,
  startVh = 50,
  spaceVh = 50,
  debug = false,
  taglineHTML = `and i&apos;ll show you how.<br /><a href="https://rahil.pro">rahil.pro</a>.`,
}: ShipStickyHeaderProps) {
  useEffect(() => {
    const root = document.documentElement;
    root.dataset.theme = theme;
    root.dataset.animate = String(animate);
    root.dataset.debug = String(debug);
    root.style.setProperty('--hue', String(hue));
    root.style.setProperty('--start', `${startVh}vh`);
    root.style.setProperty('--space', `${spaceVh}vh`);
  }, [theme, animate, debug, hue, startVh, spaceVh]);

  return (
    <div
      className="min-h-screen w-screen"
      style={
        {
          // keep count in sync with CSS sticky offset math
          ['--count' as any]: items.length,
        } as React.CSSProperties
      }
    >
      <header className="content fluid">
        <section className="content">
          <h1 className="sr-only sm:not-sr-only">
            <span aria-hidden="true">you can&nbsp;</span>
            <span className="sr-only">you can ship things.</span>
          </h1>

          {/* Visible cycling words (aria-hidden) */}
          <ul aria-hidden="true">
            {items.map((word, i) => (
              <li key={i} style={{ ['--i' as any]: i } as React.CSSProperties}>
                {word}
              </li>
            ))}
          </ul>
        </section>
      </header>

      <main>
        <section>
          <p
            className="fluid"
            dangerouslySetInnerHTML={{ __html: taglineHTML }}
          />
          {/* Bear links (kept as-is; duplicate to mirror original) */}
          <a
            className="bear-link"
            href="https://twitter.com/"
            target="_blank"
            rel="noreferrer noopener"
            aria-label="Follow on X"
          >
            <BearSVG />
          </a>
          <a
            className="bear-link"
            href="https://twitter.com/"
            target="_blank"
            rel="noreferrer noopener"
            style={{ left: '4.5rem' }}
            aria-label="Follow on X (secondary)"
          >
            <BearSVG />
          </a>
        </section>
      </main>

      {showFooter && <footer>ʕ⊙ᴥ⊙ʔ Rahil Vahora &copy; 2025</footer>}

      {/* Styles ported and condensed; uses CSS custom props like the original */}
      <style jsx global>{`
        @layer base, stick, demo, debug;

        :root {
          --start: 50vh;
          --space: 50vh;
          --hue: 280;
          --accent: light-dark(hsl(var(--hue) 100% 50%), hsl(var(--hue) 90% 75%));
          --switch: canvas;
          --font-size-min: 14;
          --font-size-max: 20;
          --font-ratio-min: 1.1;
          --font-ratio-max: 1.33;
          --font-width-min: 375;
          --font-width-max: 1500;
        }
        [data-theme='dark'] { --switch: #000; color-scheme: dark only; }
        [data-theme='light'] { --switch: #fff; color-scheme: light only; }
        html { color-scheme: light dark; scrollbar-color: var(--accent) #0000; }
        *, *::before, *::after { box-sizing: border-box; }

        body {
          font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto,
            Helvetica Neue, Arial, Noto Sans, Apple Color Emoji, Segoe UI Emoji;
          background: light-dark(white, black);
        }

        /* Screen grid background */
        body::before {
          --size: 45px; --line: color-mix(in hsl, canvasText, transparent 80%);
          content: '';
          position: fixed; inset: 0; z-index: -1;
          background:
            linear-gradient(90deg, var(--line) 1px, transparent 1px var(--size))
              calc(var(--size) * 0.36) 50% / var(--size) var(--size),
            linear-gradient(var(--line) 1px, transparent 1px var(--size)) 0%
              calc(var(--size) * 0.32) / var(--size) var(--size);
          mask: linear-gradient(-20deg, transparent 50%, white);
          pointer-events: none;
        }

        /* Utilities */
        .sr-only {
          position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px;
          overflow: hidden; clip: rect(0, 0, 0, 0); white-space: nowrap; border: 0;
        }
        .fluid {
          --fluid-min: calc(var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0)));
          --fluid-max: calc(var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0)));
          --fluid-preferred: calc((var(--fluid-max) - var(--fluid-min)) / (var(--font-width-max) - var(--font-width-min)));
          --fluid-type: clamp(
            (var(--fluid-min) / 16) * 1rem,
            ((var(--fluid-min) / 16) * 1rem)
              - (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem)
              + (var(--fluid-preferred) * var(--variable-unit, 100vi)),
            (var(--fluid-max) / 16) * 1rem
          );
          font-size: var(--fluid-type);
        }

        /* Sticky header logic */
        header {
          --font-level: 4;
          --font-size-min: 24;
          position: sticky;
          top: calc((var(--count) - 1) * -1lh);
          line-height: 1.2;
          display: flex;
          align-items: start;
          width: 100%;
          margin-bottom: var(--space);
        }
        header section:first-of-type {
          display: flex; width: 100%;
          align-items: start; justify-content: center;
          padding-top: calc(var(--start) - 0.5lh);
        }
        header section:first-of-type h1 {
          position: sticky; top: calc(var(--start) - 0.5lh);
          margin: 0; font-weight: 600;
        }

        ul {
          font-weight: 600; list-style: none; padding: 0; margin: 0;
        }

        li {
          --dimmed: color-mix(in oklch, canvasText, #0000 80%);
          background:
            linear-gradient(
              180deg,
              var(--dimmed) 0 calc(var(--start) - 0.5lh),
              var(--accent) calc(var(--start) - 0.55lh) calc(var(--start) + 0.55lh),
              var(--dimmed) calc(var(--start) + 0.5lh)
            );
          background-attachment: fixed;
          color: #0000;
          background-clip: text;
        }

        main {
          width: 100%; height: 100vh; position: relative; z-index: 2; color: canvas;
        }
        main::before {
          content: ''; position: absolute; inset: 0; z-index: -1;
          background: light-dark(#000, #fff); border-radius: 1rem 1rem 0 0;
        }
        main section {
          --font-level: 4; --font-size-min: 20;
          height: 100%; width: 100%; display: flex; place-items: center;
        }
        main section p {
          margin: 0; font-weight: 600; white-space: nowrap;
        }
        main section a:not(.bear-link) {
          color: var(--accent); text-decoration: none; text-underline-offset: 0.1lh;
        }
        main section a:not(.bear-link):is(:hover, :focus-visible) { text-decoration: underline; }

        .bear-link {
          color: canvasText;
          position: fixed; top: 1rem; left: 1rem;
          width: 48px; aspect-ratio: 1;
          display: grid; place-items: center; opacity: 0.8;
        }
        .bear-link:is(:hover, :focus-visible) { opacity: 1; }
        .bear-link svg { width: 75%; }

        footer {
          padding-block: 2rem; font-size: 0.875rem; font-weight: 300;
          color: color-mix(in hsl, canvas, #0000 35%); text-align: center; width: 100%;
          background: light-dark(#000, #fff);
        }

        /* View-timeline progressive enhancement */
        @supports (animation-timeline: view()) {
          [data-animate='true'] main { view-timeline: --section; }
          [data-animate='true'] main::before {
            transform-origin: 50% 100%;
            scale: 0.9;
            animation: grow both ease-in-out;
            animation-timeline: --section;
            animation-range: entry 50%;
          }
          [data-animate='true'] main section p {
            position: fixed; top: 50%; left: 50%; translate: -50% -50%;
            animation: reveal both ease-in-out;
            animation-timeline: --section;
            animation-range: entry 50%;
          }
          [data-animate='true'] main .bear-link {
            animation: switch both ease-in-out;
            animation-timeline: --section;
            animation-range: entry 50%;
          }
          @keyframes switch { to { color: var(--switch); } }
          @keyframes reveal { from { opacity: 0; } to { opacity: 1; } }
          @keyframes grow { to { scale: 1; border-radius: 0; } }
        }

        /* Debug */
        [data-debug='true'] li { outline: 0.05em dashed currentColor; }
        [data-debug='true'] :is(h2, li:last-of-type) { outline: 0.05em dashed canvasText; }
      `}</style>
    </div>
  );
}

function BearSVG() {
  return (
    <svg className="w-9" viewBox="0 0 969 955" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
      <circle cx="161.191" cy="320.191" r="133.191" stroke="currentColor" strokeWidth="20" />
      <circle cx="806.809" cy="320.191" r="133.191" stroke="currentColor" strokeWidth="20" />
      <circle cx="695.019" cy="587.733" r="31.4016" fill="currentColor" />
      <circle cx="272.981" cy="587.733" r="31.4016" fill="currentColor" />
      <path d="M564.388 712.083C564.388 743.994 526.035 779.911 483.372 779.911C440.709 779.911 402.356 743.994 402.356 712.083C402.356 680.173 440.709 664.353 483.372 664.353C526.035 664.353 564.388 680.173 564.388 712.083Z" fill="currentColor" />
      <rect x="310.42" y="448.31" width="343.468" height="51.4986" fill="#FF1E1E" />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M745.643 288.24C815.368 344.185 854.539 432.623 854.539 511.741H614.938V454.652C614.938 433.113 597.477 415.652 575.938 415.652H388.37C366.831 415.652 349.37 433.113 349.37 454.652V511.741L110.949 511.741C110.949 432.623 150.12 344.185 219.845 288.24C289.57 232.295 384.138 200.865 482.744 200.865C581.35 200.865 675.918 232.295 745.643 288.24Z"
        fill="currentColor"
      />
    </svg>
  );
}

export {WordHeroPage}

demo.tsx
import { WordHeroPage } from "@/components/ui/scroll-hero-section";

export default function DemoOne() {
  return <WordHeroPage
   items={['design.', 'prototype.', 'solve.', 'build.', 'develop.', 'cook.', 'ship.']}
      theme="system"
      animate
      hue={280}
      startVh={50}
      spaceVh={50}
      debug={false}
    />;
}

```

Implementation Guidelines
 1. Analyze the component structure and identify all required dependencies
 2. Review the component's argumens and state
 3. Identify any required context providers or hooks and install them
 4. Questions to Ask
 - What data/props will be passed to this component?
 - Are there any specific state management requirements?
 - Are there any required assets (images, icons, etc.)?
 - What is the expected responsive behavior?
 - What is the best place to use this component in the app?

Steps to integrate
 0. Copy paste all the code above in the correct directories
 1. Install external dependencies
 2. Fill image assets with Unsplash stock images you know exist
 3. Use lucide-react icons for svgs or logos if component requires them
